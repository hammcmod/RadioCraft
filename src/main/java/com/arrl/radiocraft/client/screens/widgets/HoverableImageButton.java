package com.arrl.radiocraft.client.screens.widgets;

import net.minecraft.client.gui.GuiGraphics;
import net.minecraft.client.gui.components.Button;
import net.minecraft.network.chat.CommonComponents;
import net.minecraft.resources.ResourceLocation;
import net.neoforged.api.distmarker.Dist;
import net.neoforged.api.distmarker.OnlyIn;
import org.jetbrains.annotations.NotNull;
import org.lwjgl.glfw.GLFW;

public class HoverableImageButton extends Button {
    private final ResourceLocation resourceLocation;
    private final int uHover;
    private final int vHover;
    private final int uPressed;
    private final int vPressed;
    private final int textureWidth;
    private final int textureHeight;
    private boolean isPressed = false;

    /**
     * Creates a button with a texture that changes when hovered and when pressed.
     * @param x The x position of this widget with relation to the screen
     * @param y The y position of this widget with relation to the screen
     * @param width The width of this widget
     * @param height The height of this widget
     * @param uHover The u position of the texture to render. This is relative to the texture file
     * @param vHover The v position of the texture to render. This is relative to the texture file
     * @param uPressed The u position of the texture to render when the button is pressed. This is relative to the texture file
     * @param vPressed The v position of the texture to render when the button is pressed. This is relative to the texture file
     * @param resourceLocation The resource file in question
     * @param textureWidth The width of the texture file
     * @param textureHeight The height of the texture file
     * @param onPress Interface function to consume the action generated by the press
     */
    public HoverableImageButton(int x, int y, int width, int height, int uHover, int vHover, int uPressed, int vPressed, ResourceLocation resourceLocation, int textureWidth, int textureHeight, Button.OnPress onPress) {
        super(x, y, width, height, CommonComponents.EMPTY, onPress, DEFAULT_NARRATION);
        this.resourceLocation = resourceLocation;
        this.uHover = uHover;
        this.vHover = vHover;
        this.uPressed = uPressed;
        this.vPressed = vPressed;
        this.textureWidth = textureWidth;
        this.textureHeight = textureHeight;
    }

    @Override
    protected void renderWidget(@NotNull GuiGraphics pGuiGraphics, int pMouseX, int pMouseY, float pPartialTick) {
        if (isPressed) {
            pGuiGraphics.blit(this.resourceLocation, getX(), getY(), uPressed, vPressed, width, height, textureWidth, textureHeight);
        } else if (this.isHovered()) {
            pGuiGraphics.blit(this.resourceLocation, getX(), getY(), uHover, vHover, width, height, textureWidth, textureHeight);
        }
    }

    @Override
    public boolean mouseClicked(double mouseX, double mouseY, int button) {
        if (mouseX >= getX() && mouseX <= getX() + width && mouseY >= getY() && mouseY <= getY() + height) {
            if (button == GLFW.GLFW_MOUSE_BUTTON_LEFT && isHoveredOrFocused()) isPressed = true;
        }
        return super.mouseClicked(mouseX, mouseY, button);
    }

    @Override
    public boolean mouseReleased(double mouseX, double mouseY, int button) {
        if (mouseX >= getX() && mouseX <= getX() + width && mouseY >= getY() && mouseY <= getY() + height) {
            if (button == GLFW.GLFW_MOUSE_BUTTON_LEFT) isPressed = false;
        }
        return super.mouseReleased(mouseX, mouseY, button);
    }

    @OnlyIn(Dist.CLIENT)
    public interface OnPress {
        void onPress(Button pButton);
    }
}
